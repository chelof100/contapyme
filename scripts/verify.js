import { createClient } from '@supabase/supabase-js';

const supabase = createClient(
  'https://uymvmqbiapcnfqskkdny.supabase.co',
  'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV5bXZtcWJpYXBjbmZxc2trZG55Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MjQ1NTgwNiwiZXhwIjoyMDY4MDMxODA2fQ.xRN2fxuEdoMva_qdLHwlrI7kiAQw4jCrn0cF2ssfVpw'
);

async function finalVerification() {
  console.log('üéâ VERIFICACI√ìN FINAL - MIGRACI√ìN COMPLETA');
  console.log('='.repeat(60));
  
  try {
    // 1. Verificar tablas principales
    console.log('\nüìã 1. VERIFICANDO TABLAS PRINCIPALES...');
    
    const mainTables = [
      'factura_productos', 'historial_precios', 'proveedores', 'clientes', 'categorias'
    ];
    
    let tablesCreated = 0;
    for (const table of mainTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('id')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Tabla ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabla ${table}: Creada correctamente`);
          tablesCreated++;
        }
      } catch (error) {
        console.log(`‚ùå Tabla ${table}: ${error.message}`);
      }
    }
    
    // 2. Verificar campos en productos
    console.log('\nüìù 2. VERIFICANDO CAMPOS EN PRODUCTOS...');
    
    const productColumns = [
      'nombre', 'codigo_barras', 'imagen_url', 'peso_kg', 'volumen_l', 'fecha_vencimiento', 'numero_lote'
    ];
    
    let columnsAdded = 0;
    for (const column of productColumns) {
      try {
        const { data, error } = await supabase
          .from('productos')
          .select(column)
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Campo ${column}: ${error.message}`);
        } else {
          console.log(`‚úÖ Campo ${column}: Agregado correctamente`);
          columnsAdded++;
        }
      } catch (error) {
        console.log(`‚ùå Campo ${column}: ${error.message}`);
      }
    }
    
    // 3. Verificar funciones
    console.log('\nüîß 3. VERIFICANDO FUNCIONES...');
    
    const functions = [
      'calcular_subtotal_factura', 'actualizar_totales_factura', 'procesar_venta_productos', 'registrar_cambio_precio'
    ];
    
    let functionsCreated = 0;
    for (const funcName of functions) {
      try {
        const { data, error } = await supabase
          .rpc(funcName, { factura_uuid: '00000000-0000-0000-0000-000000000000' })
          .select();
        
        if (error && error.message.includes('function') && error.message.includes('does not exist')) {
          console.log(`‚ùå Funci√≥n ${funcName}: No encontrada`);
        } else {
          console.log(`‚úÖ Funci√≥n ${funcName}: Creada correctamente`);
          functionsCreated++;
        }
      } catch (error) {
        if (error.message.includes('function') && error.message.includes('does not exist')) {
          console.log(`‚ùå Funci√≥n ${funcName}: No encontrada`);
        } else {
          console.log(`‚úÖ Funci√≥n ${funcName}: Creada correctamente`);
          functionsCreated++;
        }
      }
    }
    
    // 4. Verificar tablas de configuraci√≥n
    console.log('\n‚öôÔ∏è 4. VERIFICANDO TABLAS DE CONFIGURACI√ìN...');
    
    const configTables = [
      'endpoint_configurations_history', 'configuration_backups', 'configuration_tests'
    ];
    
    let configTablesCreated = 0;
    for (const table of configTables) {
      try {
        const { data, error } = await supabase
          .from(table)
          .select('id')
          .limit(1);
        
        if (error) {
          console.log(`‚ùå Tabla ${table}: ${error.message}`);
        } else {
          console.log(`‚úÖ Tabla ${table}: Creada correctamente`);
          configTablesCreated++;
        }
      } catch (error) {
        console.log(`‚ùå Tabla ${table}: ${error.message}`);
      }
    }
    
    // 5. Resumen final
    console.log('\nüìä RESUMEN FINAL DE LA MIGRACI√ìN');
    console.log('='.repeat(60));
    console.log(`üìã Tablas principales: ${tablesCreated}/${mainTables.length} creadas`);
    console.log(`üìù Campos en productos: ${columnsAdded}/${productColumns.length} agregados`);
    console.log(`üîß Funciones: ${functionsCreated}/${functions.length} creadas`);
    console.log(`‚öôÔ∏è Tablas de configuraci√≥n: ${configTablesCreated}/${configTables.length} creadas`);
    
    const totalScore = tablesCreated + columnsAdded + functionsCreated + configTablesCreated;
    const maxScore = mainTables.length + productColumns.length + functions.length + configTables.length;
    
    console.log(`\nüéØ PUNTUACI√ìN TOTAL: ${totalScore}/${maxScore} (${Math.round(totalScore/maxScore*100)}%)`);
    
    if (totalScore === maxScore) {
      console.log('\nüéâ ¬°MIGRACI√ìN COMPLETADA EXITOSAMENTE!');
      console.log('='.repeat(60));
      console.log('‚úÖ Todas las tablas creadas');
      console.log('‚úÖ Todos los campos agregados');
      console.log('‚úÖ Todas las funciones creadas');
      console.log('‚úÖ Todas las configuraciones listas');
      
      console.log('\nüöÄ FUNCIONALIDADES DISPONIBLES:');
      console.log('='.repeat(60));
      console.log('‚úÖ Integraci√≥n productos-facturas autom√°tica');
      console.log('‚úÖ C√°lculo autom√°tico de totales e IVA');
      console.log('‚úÖ Actualizaci√≥n autom√°tica de stock');
      console.log('‚úÖ Auditor√≠a autom√°tica de cambios de precios');
      console.log('‚úÖ Escaneo de c√≥digos de barras');
      console.log('‚úÖ Gesti√≥n de proveedores y clientes');
      console.log('‚úÖ Categorizaci√≥n de productos');
      console.log('‚úÖ Sistema de configuraci√≥n de endpoints');
      console.log('‚úÖ Sistema de backups autom√°ticos');
      console.log('‚úÖ Tests de conectividad');
      
      console.log('\nüéØ PR√ìXIMOS PASOS:');
      console.log('='.repeat(60));
      console.log('1. Ejecutar la aplicaci√≥n: npm run dev');
      console.log('2. Probar funcionalidades en la interfaz');
      console.log('3. Configurar webhooks y endpoints');
      console.log('4. Probar esc√°ner de c√≥digos de barras');
      console.log('5. Probar importaci√≥n masiva de productos');
      console.log('6. Probar m√≥dulo de recetas');
      console.log('7. Verificar integraci√≥n con n8n');
      
    } else {
      console.log('\n‚ö†Ô∏è MIGRACI√ìN PARCIALMENTE COMPLETADA');
      console.log('='.repeat(60));
      console.log('Algunos elementos no se crearon correctamente.');
      console.log('Revisa los errores anteriores y ejecuta los scripts faltantes.');
    }
    
  } catch (error) {
    console.error('‚ùå Error en verificaci√≥n final:', error.message);
  }
}

finalVerification().catch(console.error); 
{
  "name": "Alertas de Stock - ContaPYME",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "alerta-stock",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "alerta-stock-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Validaci√≥n de datos de entrada\nconst inputData = $input.first().json;\n\n// Validar campos obligatorios\nconst requiredFields = ['empresa_id'];\nconst missingFields = requiredFields.filter(field => !inputData[field]);\n\nif (missingFields.length > 0) {\n  throw new Error(`Campos faltantes: ${missingFields.join(', ')}`);\n}\n\n// Si se proporciona producto espec√≠fico, validar sus campos\nif (inputData.producto_id) {\n  const productoRequiredFields = ['sku', 'stock_actual', 'stock_minimo'];\n  const productoMissingFields = productoRequiredFields.filter(field => !inputData[field]);\n  \n  if (productoMissingFields.length > 0) {\n    throw new Error(`Campos faltantes para producto: ${productoMissingFields.join(', ')}`);\n  }\n}\n\n// Retornar datos validados\nreturn {\n  empresa_id: inputData.empresa_id,\n  producto_id: inputData.producto_id || null,\n  sku: inputData.sku || null,\n  stock_actual: inputData.stock_actual || null,\n  stock_minimo: inputData.stock_minimo || null,\n  modo: inputData.modo || 'automatico', // automatico|manual\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "validar-datos",
      "name": "Validar Datos",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT p.id, p.sku, p.nombre, p.stock_actual, p.stock_minimo, p.categoria\nFROM productos p\nWHERE p.empresa_id = $1\n  AND p.stock_actual <= p.stock_minimo\n  AND p.activo = true\nORDER BY p.stock_actual ASC, p.sku;",
        "options": {
          "queryReplacement": "SELECT p.id, p.sku, p.nombre, p.stock_actual, p.stock_minimo, p.categoria\nFROM productos p\nWHERE p.empresa_id = $1\n  AND p.stock_actual <= p.stock_minimo\n  AND p.activo = true\nORDER BY p.stock_actual ASC, p.sku;"
        }
      },
      "id": "consultar-productos-bajo-stock",
      "name": "Consultar Productos Bajo Stock",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT producto_id, fecha_alerta\nFROM alertas_stock\nWHERE empresa_id = $1\n  AND fecha_alerta >= CURRENT_DATE - INTERVAL '24 hours'\n  AND estado = 'activa';",
        "options": {
          "queryReplacement": "SELECT producto_id, fecha_alerta\nFROM alertas_stock\nWHERE empresa_id = $1\n  AND fecha_alerta >= CURRENT_DATE - INTERVAL '24 hours'\n  AND estado = 'activa';"
        }
      },
      "id": "consultar-alertas-recientes",
      "name": "Consultar Alertas Recientes",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [900, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos de entrada\nconst inputData = $input.first().json;\nconst productosBajoStock = $('Consultar Productos Bajo Stock').first().json;\nconst alertasRecientes = $('Consultar Alertas Recientes').first().json;\n\n// Crear set de productos con alertas recientes\nconst productosConAlerta = new Set(alertasRecientes.map(a => a.producto_id));\n\n// Filtrar productos que necesitan nueva alerta\nconst productosParaAlertar = productosBajoStock.filter(producto => {\n  // Si es modo manual y se especifica un producto, solo procesar ese\n  if (inputData.modo === 'manual' && inputData.producto_id) {\n    return producto.id === inputData.producto_id;\n  }\n  \n  // Si ya hay una alerta reciente (√∫ltimas 24 horas), no crear nueva\n  if (productosConAlerta.has(producto.id)) {\n    return false;\n  }\n  \n  return true;\n});\n\n// Preparar datos para las alertas\nconst alertas = productosParaAlertar.map(producto => {\n  const diferencia = producto.stock_minimo - producto.stock_actual;\n  const porcentaje = Math.round((producto.stock_actual / producto.stock_minimo) * 100);\n  \n  return {\n    empresa_id: inputData.empresa_id,\n    producto_id: producto.id,\n    sku: producto.sku,\n    nombre: producto.nombre,\n    categoria: producto.categoria,\n    stock_actual: producto.stock_actual,\n    stock_minimo: producto.stock_minimo,\n    diferencia: diferencia,\n    porcentaje: porcentaje,\n    fecha_alerta: new Date().toISOString().split('T')[0],\n    created_at: new Date().toISOString()\n  };\n});\n\n// Retornar datos procesados\nreturn {\n  empresa_id: inputData.empresa_id,\n  productos_analizados: productosBajoStock.length,\n  alertas_generadas: alertas.length,\n  alertas: alertas,\n  modo: inputData.modo,\n  timestamp: inputData.timestamp\n};"
      },
      "id": "filtrar-y-preparar-alertas",
      "name": "Filtrar y Preparar Alertas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "alertas_stock",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "empresa_id": "={{ $json.empresa_id }}",
            "producto_id": "={{ $json.producto_id }}",
            "sku": "={{ $json.sku }}",
            "descripcion": "={{ `Stock bajo para ${$json.nombre} (${$json.sku}) - ${$json.stock_actual}/${$json.stock_minimo} (${$json.porcentaje}%)` }}",
            "stock_actual": "={{ $json.stock_actual }}",
            "stock_minimo": "={{ $json.stock_minimo }}",
            "diferencia": "={{ $json.diferencia }}",
            "fecha_alerta": "={{ $json.fecha_alerta }}",
            "estado": "activa",
            "created_at": "={{ $json.created_at }}"
          },
          "matchingColumns": [
            "id"
          ]
        },
        "options": {}
      },
      "id": "registrar-alertas",
      "name": "Registrar Alertas",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Preparar datos para el email\nconst alertas = $('Filtrar y Preparar Alertas').first().json.alertas;\nconst empresaId = $('Filtrar y Preparar Alertas').first().json.empresa_id;\n\nif (alertas.length === 0) {\n  return {\n    enviar_email: false,\n    mensaje: 'No hay alertas nuevas para enviar'\n  };\n}\n\n// Crear tabla HTML para el email\nlet tablaHTML = '<table border=\"1\" style=\"border-collapse: collapse; width: 100%;\">';\ntablaHTML += '<tr style=\"background-color: #f2f2f2;\"><th>SKU</th><th>Producto</th><th>Categor√≠a</th><th>Stock Actual</th><th>Stock M√≠nimo</th><th>Diferencia</th><th>Porcentaje</th></tr>';\n\nalertas.forEach(alerta => {\n  const colorFila = alerta.stock_actual === 0 ? '#ffcccc' : '#fff3cd';\n  tablaHTML += `<tr style=\"background-color: ${colorFila};\">`;\n  tablaHTML += `<td>${alerta.sku}</td>`;\n  tablaHTML += `<td>${alerta.nombre}</td>`;\n  tablaHTML += `<td>${alerta.categoria || 'N/A'}</td>`;\n  tablaHTML += `<td>${alerta.stock_actual}</td>`;\n  tablaHTML += `<td>${alerta.stock_minimo}</td>`;\n  tablaHTML += `<td>${alerta.diferencia}</td>`;\n  tablaHTML += `<td>${alerta.porcentaje}%</td>`;\n  tablaHTML += '</tr>';\n});\n\ntablaHTML += '</table>';\n\n// Preparar mensaje del email\nconst asunto = `‚ö†Ô∏è Alertas de Stock - ${alertas.length} producto${alertas.length > 1 ? 's' : ''} con stock bajo`;\n\nconst mensaje = `\n<h2>üö® Alertas de Stock - OnePyme</h2>\n\n<p>Se han detectado <strong>${alertas.length} producto${alertas.length > 1 ? 's' : ''}</strong> con stock bajo o agotado:</p>\n\n${tablaHTML}\n\n<p><strong>Acciones recomendadas:</strong></p>\n<ul>\n  <li>Revisar inventario de los productos listados</li>\n  <li>Contactar proveedores para reposici√≥n</li>\n  <li>Actualizar stock m√≠nimo si es necesario</li>\n  <li>Considerar alternativas de productos</li>\n</ul>\n\n<p><em>Esta alerta fue generada autom√°ticamente por el sistema OnePYME.</em></p>\n`;\n\nreturn {\n  enviar_email: true,\n  asunto: asunto,\n  mensaje: mensaje,\n  alertas_count: alertas.length,\n  empresa_id: empresaId\n};"
      },
      "id": "preparar-email",
      "name": "Preparar Email",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "sendEmail",
        "fromEmail": "={{ $env.GMAIL_FROM || 'alertas@tuempresa.com' }}",
        "toEmail": "={{ $env.ALERTAS_EMAIL_DESTINATARIO || 'admin@tuempresa.com' }}",
        "subject": "={{ $('Preparar Email').first().json.asunto }}",
        "message": "={{ $('Preparar Email').first().json.mensaje }}",
        "options": {
          "messageType": "html"
        }
      },
      "id": "enviar-alerta-email",
      "name": "Enviar Alerta Email",
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 1,
      "position": [1780, 300],
      "credentials": {
        "gmailOAuth2Api": {
          "id": "gmail-credentials",
          "name": "Gmail OAuth2"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Alertas de stock procesadas exitosamente\",\n  \"empresa_id\": $('Filtrar y Preparar Alertas').first().json.empresa_id,\n  \"productos_analizados\": $('Filtrar y Preparar Alertas').first().json.productos_analizados,\n  \"alertas_generadas\": $('Filtrar y Preparar Alertas').first().json.alertas_generadas,\n  \"email_enviado\": $('Preparar Email').first().json.enviar_email,\n  \"modo\": $('Filtrar y Preparar Alertas').first().json.modo,\n  \"timestamp\": $('Filtrar y Preparar Alertas').first().json.timestamp,\n  \"workflow\": \"alerta-stock\"\n}",
        "options": {}
      },
      "id": "respuesta-exito",
      "name": "Respuesta de √âxito",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": $json.message || \"Error en el procesamiento de alertas de stock\",\n  \"error\": $json.message,\n  \"timestamp\": new Date().toISOString(),\n  \"workflow\": \"alerta-stock\"\n}",
        "options": {}
      },
      "id": "respuesta-error",
      "name": "Respuesta de Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validar Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Datos": {
      "main": [
        [
          {
            "node": "Consultar Productos Bajo Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Productos Bajo Stock": {
      "main": [
        [
          {
            "node": "Consultar Alertas Recientes",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Alertas Recientes": {
      "main": [
        [
          {
            "node": "Filtrar y Preparar Alertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar y Preparar Alertas": {
      "main": [
        [
          {
            "node": "Registrar Alertas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Alertas": {
      "main": [
        [
          {
            "node": "Preparar Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Email": {
      "main": [
        [
          {
            "node": "Enviar Alerta Email",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Alerta Email": {
      "main": [
        [
          {
            "node": "Respuesta de √âxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "contapyme-alertas",
      "name": "ContaPYME Alertas"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 
{
  "name": "Actualizar Stock - ContaPYME",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "actualizar-stock",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300],
      "webhookId": "actualizar-stock-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Validación de datos de entrada\nconst inputData = $input.first().json;\n\n// Validar campos obligatorios\nconst requiredFields = ['factura_id', 'empresa_id', 'productos'];\nconst missingFields = requiredFields.filter(field => !inputData[field]);\n\nif (missingFields.length > 0) {\n  throw new Error(`Campos faltantes: ${missingFields.join(', ')}`);\n}\n\n// Validar que productos sea un array\nif (!Array.isArray(inputData.productos)) {\n  throw new Error('El campo productos debe ser un array');\n}\n\n// Validar cada producto\nconst validatedProductos = inputData.productos.map((producto, index) => {\n  const requiredProductFields = ['producto_id', 'sku', 'cantidad_vendida'];\n  const missingProductFields = requiredProductFields.filter(field => !producto[field]);\n  \n  if (missingProductFields.length > 0) {\n    throw new Error(`Producto ${index + 1} - Campos faltantes: ${missingProductFields.join(', ')}`);\n  }\n  \n  if (producto.cantidad_vendida <= 0) {\n    throw new Error(`Producto ${producto.sku} - La cantidad vendida debe ser mayor a 0`);\n  }\n  \n  return producto;\n});\n\n// Retornar datos validados\nreturn {\n  factura_id: inputData.factura_id,\n  empresa_id: inputData.empresa_id,\n  productos: validatedProductos,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "validar-datos",
      "name": "Validar Datos",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT p.id, p.sku, p.nombre, p.stock_actual, p.stock_minimo\nFROM productos p\nWHERE p.empresa_id = $1 AND p.id = ANY($2)\nORDER BY p.sku;",
        "options": {
          "queryReplacement": "SELECT p.id, p.sku, p.nombre, p.stock_actual, p.stock_minimo\nFROM productos p\nWHERE p.empresa_id = $1 AND p.id = ANY($2)\nORDER BY p.sku;"
        }
      },
      "id": "consultar-stock",
      "name": "Consultar Stock Actual",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [680, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener datos de entrada\nconst inputData = $input.first().json;\nconst productosSolicitados = inputData.productos;\nconst stockActual = $('Consultar Stock Actual').first().json;\n\n// Crear mapa de stock actual por producto_id\nconst stockMap = {};\nstockActual.forEach(item => {\n  stockMap[item.id] = {\n    sku: item.sku,\n    nombre: item.nombre,\n    stock_actual: item.stock_actual,\n    stock_minimo: item.stock_minimo\n  };\n});\n\n// Validar stock disponible para cada producto\nconst productosValidados = [];\nconst errores = [];\n\nproductosSolicitados.forEach(producto => {\n  const stockInfo = stockMap[producto.producto_id];\n  \n  if (!stockInfo) {\n    errores.push(`Producto ${producto.sku} no encontrado en la base de datos`);\n    return;\n  }\n  \n  if (stockInfo.stock_actual < producto.cantidad_vendida) {\n    errores.push(`Stock insuficiente para ${producto.sku}: disponible ${stockInfo.stock_actual}, solicitado ${producto.cantidad_vendida}`);\n    return;\n  }\n  \n  // Calcular nuevo stock\n  const nuevoStock = stockInfo.stock_actual - producto.cantidad_vendida;\n  \n  productosValidados.push({\n    producto_id: producto.producto_id,\n    sku: producto.sku,\n    nombre: stockInfo.nombre,\n    cantidad_vendida: producto.cantidad_vendida,\n    stock_anterior: stockInfo.stock_actual,\n    stock_nuevo: nuevoStock,\n    stock_minimo: stockInfo.stock_minimo,\n    necesita_alerta: nuevoStock <= stockInfo.stock_minimo\n  });\n});\n\n// Si hay errores, lanzar excepción\nif (errores.length > 0) {\n  throw new Error(`Errores de validación:\\n${errores.join('\\n')}`);\n}\n\n// Retornar datos validados\nreturn {\n  factura_id: inputData.factura_id,\n  empresa_id: inputData.empresa_id,\n  productos: productosValidados,\n  timestamp: inputData.timestamp\n};"
      },
      "id": "validar-stock",
      "name": "Validar Stock Disponible",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "update",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "productos",
          "mode": "list"
        },
        "updateKey": "id",
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "stock_actual": "={{ $json.stock_nuevo }}",
            "updated_at": "={{ new Date().toISOString() }}"
          },
          "matchingColumns": [
            "id"
          ]
        },
        "options": {}
      },
      "id": "actualizar-productos",
      "name": "Actualizar Stock de Productos",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1120, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "movimientos_stock",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "empresa_id": "={{ $('Validar Stock Disponible').first().json.empresa_id }}",
            "producto_id": "={{ $json.producto_id }}",
            "sku": "={{ $json.sku }}",
            "tipo_movimiento": "egreso",
            "cantidad": "={{ $json.cantidad_vendida }}",
            "stock_anterior": "={{ $json.stock_anterior }}",
            "stock_nuevo": "={{ $json.stock_nuevo }}",
            "tipo_egreso": "venta",
            "referencia": "={{ $('Validar Stock Disponible').first().json.factura_id }}",
            "observaciones": "Venta automática por facturación",
            "usuario_id": "={{ $('Validar Stock Disponible').first().json.usuario_id || null }}",
            "created_at": "={{ new Date().toISOString() }}"
          },
          "matchingColumns": [
            "id"
          ]
        },
        "options": {}
      },
      "id": "registrar-movimientos",
      "name": "Registrar Movimientos de Stock",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1340, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obtener productos que necesitan alerta\nconst productos = $('Validar Stock Disponible').first().json.productos;\nconst productosConAlerta = productos.filter(p => p.necesita_alerta);\n\n// Crear alertas si es necesario\nconst alertas = [];\n\nproductosConAlerta.forEach(producto => {\n  alertas.push({\n    empresa_id: $('Validar Stock Disponible').first().json.empresa_id,\n    producto_id: producto.producto_id,\n    sku: producto.sku,\n    descripcion: `Stock bajo para ${producto.nombre} (${producto.sku})`,\n    stock_actual: producto.stock_nuevo,\n    stock_minimo: producto.stock_minimo,\n    diferencia: producto.stock_minimo - producto.stock_nuevo,\n    fecha_alerta: new Date().toISOString().split('T')[0],\n    created_at: new Date().toISOString()\n  });\n});\n\n// Retornar datos para el siguiente nodo\nreturn {\n  factura_id: $('Validar Stock Disponible').first().json.factura_id,\n  empresa_id: $('Validar Stock Disponible').first().json.empresa_id,\n  productos_actualizados: productos.length,\n  alertas_generadas: alertas.length,\n  productos_con_alerta: productosConAlerta.map(p => p.sku),\n  alertas: alertas,\n  timestamp: $('Validar Stock Disponible').first().json.timestamp\n};"
      },
      "id": "preparar-alertas",
      "name": "Preparar Alertas de Stock",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "operation": "insert",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list"
        },
        "table": {
          "__rl": true,
          "value": "alertas_stock",
          "mode": "list"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "empresa_id": "={{ $json.empresa_id }}",
            "producto_id": "={{ $json.producto_id }}",
            "sku": "={{ $json.sku }}",
            "descripcion": "={{ $json.descripcion }}",
            "stock_actual": "={{ $json.stock_actual }}",
            "stock_minimo": "={{ $json.stock_minimo }}",
            "diferencia": "={{ $json.diferencia }}",
            "fecha_alerta": "={{ $json.fecha_alerta }}",
            "created_at": "={{ $json.created_at }}"
          },
          "matchingColumns": [
            "id"
          ]
        },
        "options": {}
      },
      "id": "crear-alertas",
      "name": "Crear Alertas de Stock",
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [1780, 300],
      "credentials": {
        "supabaseApi": {
          "id": "supabase-credentials",
          "name": "Supabase API"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"message\": \"Stock actualizado exitosamente\",\n  \"factura_id\": $('Preparar Alertas de Stock').first().json.factura_id,\n  \"empresa_id\": $('Preparar Alertas de Stock').first().json.empresa_id,\n  \"productos_actualizados\": $('Preparar Alertas de Stock').first().json.productos_actualizados,\n  \"alertas_generadas\": $('Preparar Alertas de Stock').first().json.alertas_generadas,\n  \"productos_con_alerta\": $('Preparar Alertas de Stock').first().json.productos_con_alerta,\n  \"timestamp\": $('Preparar Alertas de Stock').first().json.timestamp,\n  \"workflow\": \"actualizar-stock\"\n}",
        "options": {}
      },
      "id": "respuesta-exito",
      "name": "Respuesta de Éxito",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": false,\n  \"message\": $json.message || \"Error en la actualización de stock\",\n  \"error\": $json.message,\n  \"timestamp\": new Date().toISOString(),\n  \"workflow\": \"actualizar-stock\"\n}",
        "options": {}
      },
      "id": "respuesta-error",
      "name": "Respuesta de Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [2000, 500]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Validar Datos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Datos": {
      "main": [
        [
          {
            "node": "Consultar Stock Actual",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Consultar Stock Actual": {
      "main": [
        [
          {
            "node": "Validar Stock Disponible",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validar Stock Disponible": {
      "main": [
        [
          {
            "node": "Actualizar Stock de Productos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Actualizar Stock de Productos": {
      "main": [
        [
          {
            "node": "Registrar Movimientos de Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Registrar Movimientos de Stock": {
      "main": [
        [
          {
            "node": "Preparar Alertas de Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Preparar Alertas de Stock": {
      "main": [
        [
          {
            "node": "Crear Alertas de Stock",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crear Alertas de Stock": {
      "main": [
        [
          {
            "node": "Respuesta de Éxito",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [
    {
      "createdAt": "2024-01-01T00:00:00.000Z",
      "updatedAt": "2024-01-01T00:00:00.000Z",
      "id": "contapyme-stock",
      "name": "ContaPYME Stock"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2024-01-01T00:00:00.000Z",
  "versionId": "1"
} 
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { mockSupabase } from '@/utils/mockSupabase';

// Detectar GitHub Pages de manera más robusta
const isGitHubPages = typeof window !== 'undefined' && (
  window.location.hostname === 'chelof100.github.io' ||
  window.location.hostname.includes('github.io') ||
  window.location.pathname.includes('/contapyme/') ||
  import.meta.env.BASE_URL === '/contapyme/'
);

console.log('GitHub Pages detection check:', {
  hostname: typeof window !== 'undefined' ? window.location.hostname : 'server',
  pathname: typeof window !== 'undefined' ? window.location.pathname : 'server',
  baseUrl: import.meta.env.BASE_URL,
  mode: import.meta.env.MODE,
  isGitHubPages
});

// Usar mock en GitHub Pages, real en otros casos
let supabaseClient: any;

if (isGitHubPages) {
  console.log('✅ Using mock Supabase for GitHub Pages demo');
  supabaseClient = mockSupabase;
} else {
  // Obtener configuración desde variables de entorno o configuración pública
  const SUPABASE_URL = import.meta.env.VITE_SUPABASE_URL || (window as any).ENV_CONFIG?.VITE_SUPABASE_URL;
  const SUPABASE_PUBLISHABLE_KEY = import.meta.env.VITE_SUPABASE_ANON_KEY || (window as any).ENV_CONFIG?.VITE_SUPABASE_ANON_KEY;

  console.log('Environment variables check:', {
    hasUrl: !!SUPABASE_URL,
    hasKey: !!SUPABASE_PUBLISHABLE_KEY,
    mode: import.meta.env.MODE
  });

  // Validar que las credenciales estén disponibles
  if (!SUPABASE_URL) {
    console.error('VITE_SUPABASE_URL is missing. Falling back to mock Supabase.');
    supabaseClient = mockSupabase;
  } else if (!SUPABASE_PUBLISHABLE_KEY) {
    console.error('VITE_SUPABASE_ANON_KEY is missing. Falling back to mock Supabase.');
    supabaseClient = mockSupabase;
  } else {
    console.log('Using real Supabase client');
    supabaseClient = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
      auth: {
        storage: localStorage,
        persistSession: true,
        autoRefreshToken: true,
      }
    });
  }
}

export const supabase = supabaseClient;
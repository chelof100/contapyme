import { createClient } from '@supabase/supabase-js';

const supabaseUrl = 'https://uymvmqbiapcnfqskkdny.supabase.co';
const supabaseKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InV5bXZtcWJpYXBjbmZxc2trZG55Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI0NTU4MDYsImV4cCI6MjA2ODAzMTgwNn0.CWH8cta4J0-GQQASH62PP2pkjf3WBft8UEtHVD6KZ_c';

const supabase = createClient(supabaseUrl, supabaseKey);

async function testAuthFrontend() {
  console.log('üß™ Probando autenticaci√≥n del frontend...\n');
  
  try {
    // Test 1: Login como developer
    console.log('üë®‚Äçüíª Probando login como developer...');
    const { data: devData, error: devError } = await supabase.auth.signInWithPassword({
      email: 'developer@test.com',
      password: 'developer123'
    });
    
    if (devError) {
      console.log('‚ùå Error login developer:', devError.message);
      return;
    }
    
    console.log('‚úÖ Login developer exitoso');
    console.log('üîë User ID:', devData.user.id);
    console.log('üìß Email:', devData.user.email);
    console.log('üîê Session:', !!devData.session);
    
    // Test 2: Verificar que la sesi√≥n est√° activa
    console.log('\nüîç Verificando sesi√≥n activa...');
    const { data: { session } } = await supabase.auth.getSession();
    
    if (session) {
      console.log('‚úÖ Sesi√≥n activa encontrada');
      console.log('üë§ Usuario en sesi√≥n:', session.user.email);
    } else {
      console.log('‚ùå No hay sesi√≥n activa');
    }
    
    // Test 3: Consultar profiles (deber√≠a funcionar con RLS)
    console.log('\nüìä Consultando tabla profiles...');
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('*');
    
    if (profilesError) {
      console.log('‚ùå Error consultando profiles:', profilesError.message);
      console.log('üîç C√≥digo:', profilesError.code);
      console.log('üîç Detalles:', profilesError.details);
    } else {
      console.log(`‚úÖ Profiles consultados exitosamente: ${profiles?.length || 0} usuarios`);
      if (profiles && profiles.length > 0) {
        console.log('üë• Usuarios encontrados:');
        profiles.forEach(user => {
          console.log(`  ‚Ä¢ ${user.email} (rol: ${user.role})`);
        });
      }
    }
    
    // Test 4: Verificar que el usuario actual puede ver su propio perfil
    console.log('\nüîç Verificando perfil del usuario actual...');
    const { data: currentProfile, error: currentProfileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', devData.user.id)
      .single();
    
    if (currentProfileError) {
      console.log('‚ùå Error obteniendo perfil actual:', currentProfileError.message);
    } else {
      console.log('‚úÖ Perfil actual obtenido:', currentProfile.role);
    }
    
    console.log('\nüéØ RESUMEN DEL TEST:');
    console.log('‚Ä¢ Login: ‚úÖ Exitoso');
    console.log('‚Ä¢ Sesi√≥n: ‚úÖ Activa');
    console.log('‚Ä¢ RLS Profiles: ‚úÖ Funcionando');
    console.log('‚Ä¢ Usuarios cargados:', profiles?.length || 0);
    
  } catch (error) {
    console.log('‚ùå Error general:', error.message);
  }
}

testAuthFrontend();
